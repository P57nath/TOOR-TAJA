// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  superadmin
  manager
  support
  seller
  buyer
  guest
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  role      Role
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // relations
  products Product[] // if seller
  orders   Order[] // if buyer
  cart     Cart?
}

model Category {
  id       String    @id @default(cuid())
  name     String    @unique
  products Product[]
}

model Product {
  id          String   @id @default(cuid())
  name        String
  price       Decimal  @db.Decimal(10, 2)
  stock       Int      @default(0)
  description String?
  imageUrl    String?
  rating      Float    @default(0)
  available   Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  categoryId String
  category   Category @relation(fields: [categoryId], references: [id])

  sellerId String
  seller   User   @relation(fields: [sellerId], references: [id])

  reviews    Review[]
  orderItems OrderItem[]
  CartItem   CartItem[]
}

model Review {
  id        String   @id @default(cuid())
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  guestName String
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
}

model Cart {
  id        String     @id @default(cuid())
  buyerId   String     @unique
  buyer     User       @relation(fields: [buyerId], references: [id])
  items     CartItem[]
  coupon    String?
  updatedAt DateTime   @updatedAt
}

model CartItem {
  id        String  @id @default(cuid())
  cartId    String
  cart      Cart    @relation(fields: [cartId], references: [id])
  productId String
  product   Product @relation(fields: [productId], references: [id])
  name      String
  price     Decimal @db.Decimal(10, 2)
  quantity  Int
}

model Order {
  id        String      @id @default(cuid())
  buyerId   String
  buyer     User        @relation(fields: [buyerId], references: [id])
  items     OrderItem[]
  total     Decimal     @db.Decimal(10, 2)
  status    String      @default("pending")
  addressId String?
  note      String?
  createdAt DateTime    @default(now())
}

model OrderItem {
  id        String  @id @default(cuid())
  orderId   String
  order     Order   @relation(fields: [orderId], references: [id])
  productId String
  product   Product @relation(fields: [productId], references: [id])
  name      String
  price     Decimal @db.Decimal(10, 2)
  quantity  Int
}
